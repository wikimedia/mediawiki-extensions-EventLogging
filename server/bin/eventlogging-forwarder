#!/usr/bin/env python -OO
# -*- coding: utf-8 -*-
"""
  eventlogging-forwarder
  ----------------------
  Arbitrary input -> ZeroMQ socket forwarding. Reads line-oriented input from
  an input stream and writes it to a ZeroMQ TCP PUB socket bound to the same
  port number.

  Because ZeroMQ is message-oriented, we cannot simply use recv_into to read
  bytes from the input into the ZMQ socket. We use socket.makefile() to
  facilitate reading and writing whole lines.

  usage: eventlogging-forwarder [-h] input port

  positional arguments:
    input    input uri
      Examples:
        udp://localhost:8599
        kafka://?brokers=broker1:9092,broker2:9092&topic=foo&group_id=bar
    port     ZeroMQ TCP port to forward to

  optional arguments:
    -h, --help  show this help message and exit

  :copyright: (c) 2012 by Ori Livneh <ori@wikimedia.org>
  :license: GNU General Public Licence 2.0 or later

"""
from __future__ import unicode_literals

import sys
reload(sys)
sys.setdefaultencoding('utf-8')

import argparse
import logging

from eventlogging import pub_socket, setup_logging, get_reader, uri_force_raw


ap = argparse.ArgumentParser(description='ZeroMQ UDP => PUB Device',
                             fromfile_prefix_chars='@')
# Forward raw events.  This keeps the reader
# attempting to parse the input as json.
ap.add_argument('input', help='URI of raw input stream', type=uri_force_raw)
ap.add_argument('port', type=int, help='Port to forward')
ap.add_argument('--count', action='store_true',
                help='Prepend an autoincrementing ID to each message')
args = ap.parse_args()

setup_logging()

logging.info('Forwarding %s => tcp:%d...', args.input, args.port)
input_stream = get_reader(args.input)
sock_out = pub_socket(args.port)

if args.count:
    input_stream = (
        '{0}\t{1}'.format(str(id), msg) for id, msg in enumerate(input_stream)
    )
for line in input_stream:
    sock_out.send_string(line)
