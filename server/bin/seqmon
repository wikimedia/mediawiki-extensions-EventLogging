#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
  seqmon
  ------
  Monitor sequence IDs on a stream of varnishncsa udp output for gaps.

  usage: seqmon [options] stream destfile

  positional arguments:
    stream       log file or stream URI
    destfile     write log to this file

  optional arguments:
    -h, --help   show this help message and exit
    --sid SID    set socket identity
    --sep SEP    field seperator (default: whitespace)
    --hpos HPOS  position of host field (0-indexed; default: 1)
    --spos SPOS  position of seq id field (0-indexed; default: 2)

  :copyright: (c) 2012 by Ori Livneh <ori@wikimedia.org>
  :license: GNU General Public Licence 2.0 or later

"""
from __future__ import unicode_literals

import argparse
import collections
import logging
import logging.handlers

from eventlogging import zmq_subscribe


#
# Parse command-line args
#

parser = argparse.ArgumentParser(description='Monitor udp2log sequence IDs.')
parser.add_argument('input', help='URI of input stream')
parser.add_argument('destfile', help='write log to this file')
parser.add_argument('--sid', help='set socket identity')
parser.add_argument('--sep', help='field seperator (default: whitespace)')
parser.add_argument('--hpos', type=int, default=1,
                    help='position of host field (0-indexed; default: 1)')
parser.add_argument('--spos', type=int, default=2,
                    help='position of seq id field (0-indexed; default: 2)')
args = parser.parse_args()


# Configure logging to file:
formatter = logging.Formatter('%(asctime)s\t%(message)s')

logfile_handler = logging.handlers.WatchedFileHandler(
    filename=args.destfile, encoding='utf8')
logfile_handler.setFormatter(formatter)
logfile_handler.setLevel(logging.INFO)

# Configure logging to stderr:
console_handler = logging.StreamHandler()
console_handler.setFormatter(formatter)
console_handler.setLevel(logging.DEBUG)  # Don't pollute log files with status

log = logging.getLogger(__name__)
log.setLevel(logging.DEBUG)
log.addHandler(logfile_handler)
log.addHandler(console_handler)
log.debug('Started. Logging to %s.' % args.destfile)

lost = collections.defaultdict(int)
seqs = {}

for line in zmq_subscribe(args.input, sid=args.sid):
    try:
        fields = line.split(args.sep)
        host = fields[args.hpos]
        seq = int(fields[args.spos])
    except (ValueError, IndexError):
        log.exception('Unable to parse log line: %s', line)
        continue

    last = seqs.get(host)
    seqs[host] = seq

    if last is not None and last < (seq - 1):
        skipped = seq - last - 1
        log.error('%s: %d -> %d (skipped: %d)', host, last, seq, skipped)
        lost[host] += skipped
