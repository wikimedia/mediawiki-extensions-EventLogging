#!/usr/bin/env python -u
# -*- coding: utf-8 -*-
"""
  sv-alerts
  ---------

  E-mail supervisord alerts.

  usage: sv-alerts [-h] from to

  positional arguments:
    sender      sender's e-mail address
    recipient   recipient's e-mail address

  optional arguments:
    -h, --help  show this help message and exit

  :copyright: (c) 2012 by Ori Livneh <ori@wikimedia.org>
  :license: GNU General Public Licence 2.0 or later

"""
from __future__ import print_function, unicode_literals

import argparse
import ast
import datetime
import json
import logging
import subprocess
import sys

from email.mime.text import MIMEText


parser = argparse.ArgumentParser(description='sv-alerts')
parser.add_argument('sender', help="sender's e-mail address")
parser.add_argument('recipient', help="recipient's e-mail address")


def send_email(sender, recipient, subject, text):
    """Send an e-mail by shelling out to 'sendmail'."""
    message = MIMEText(text)
    message['From'] = sender
    message['To'] = recipient
    message['Subject'] = subject
    p = subprocess.Popen(('/usr/sbin/sendmail', '-t'), stdin=subprocess.PIPE)
    p.communicate(message.as_string().encode('utf8'))
    logging.info('sent: %s', message.as_string())


def parse_tokens(raw):
    """Parse a raw Supervisor event."""
    map = {}
    raw = raw.strip()
    for kv in raw.split():
        try:
            k, v = kv.split(':')
        except ValueError:
            continue
        try:
            map[k] = ast.literal_eval(v)
        except ValueError:
            map[k] = v
    return map


def iter_events():
    """Reads and yields Supervisor events."""
    while 1:
        print('READY')
        sys.stdout.flush()
        event = parse_tokens(sys.stdin.readline())
        length = event.get('len', 0)
        if length:
            raw = sys.stdin.read(length)
            event.update(parse_tokens(raw))
        print('RESULT 2', 'OK', sep='\n', end='')
        sys.stdout.flush()
        yield event


def send_alerts(sender, recipient):
    """Listen to Supervisor events and emit e-mail alerts."""
    for event in iter_events():
        eventname = event['eventname'].replace('PROCESS_STATE_', '')
        processname = event.get('processname', 'supervisord')
        subject = '%s: %s' % (eventname, processname)
        text = 'This is an automatic alert, generated at %s.\n\n%s' % (
            datetime.datetime.utcnow(), json.dumps(event, indent=4))
        send_email(sender, recipient, subject, text)


if __name__ == '__main__':
    logging.basicConfig(stream=sys.stderr, level=logging.DEBUG)
    args = parser.parse_args()
    send_alerts(sender=args.sender, recipient=args.recipient)
