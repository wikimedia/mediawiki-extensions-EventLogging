#!/usr/bin/env python -OO
# -*- coding: utf-8 -*-
"""
  eventlogging-processor
  -----------------------------
  Transform raw log stream to JSON event stream

  usage: eventlogging-processor [-h] [--sid SID] format input output

  positional arguments:
    format      Format string
    input       URI of raw input stream
    output      URI of output stream

  optional arguments:
    -h, --help  show this help message and exit
    --sid SID   set input socket identity
    --output-invalid  URI of stream which to send invalid events

  formatters:
     %h         Client IP
     %j         JSON object
     %q         Query-string-encoded JSON
     %t         Timestamp in NCSA format.

  :copyright: (c) 2012 by Ori Livneh <ori@wikimedia.org>
  :license: GNU General Public Licence 2.0 or later

"""
from __future__ import unicode_literals

import sys
reload(sys)
sys.setdefaultencoding('utf-8')

import argparse
import logging

from eventlogging import (capsule_uuid, create_event_error, LogParser,
                          get_reader, get_writer, validate, setup_logging,
                          uri_force_raw, uri_append_query_items)


setup_logging()

ap = argparse.ArgumentParser(description='Raw log -> JSON stream',
                             fromfile_prefix_chars='@')
ap.add_argument('format', help='Format string')
# Read in raw events.  This keeps the reader
# attempting to parse the input as json.
ap.add_argument('input', help='URI of raw input stream', type=uri_force_raw)
ap.add_argument('output', help='URI of output stream')
ap.add_argument('--sid', help='set input socket identity')
ap.add_argument(
    '--output-invalid',
    help='URI of output stream for invalid events',
)
args = ap.parse_args()

parser = LogParser(args.format)
writer = get_writer(args.output)
logging.info('Publishing JSON events on %s.', args.output)

if args.output_invalid:
    writer_invalid = get_writer(args.output_invalid)
    logging.info('Publishing invalid events on %s.', args.output_invalid)
else:
    writer_invalid = None

if args.sid:
    args.input = uri_append_query_items(args.input, {'identity': args.sid})

for raw_event in get_reader(args.input):
    try:
        event = parser.parse(raw_event)
        event.pop('clientValidated', None)
        event.pop('isTruncated', None)
        validate(event)
        event['uuid'] = capsule_uuid(event)
    except Exception as e:
        logging.error('Unable to decode: %s (%s)', raw_event, e.message)
        if writer_invalid:
            try:
                writer_invalid.send(create_event_error(
                    raw_event, e.message, 'processor'
                ))
            except Exception as error_e:
                logging.error(
                    'Unable to create error event: %s' % error_e.message
                )
    else:
        writer.send(event)
