#!/usr/bin/env python
# -*- coding: utf8 -*-
"""
  udp2zmq
  -------

  UDP -> ZeroMQ socket forwarding. Reads line-oriented input from UDP socket
  and writes it to a ZeroMQ TCP PUB socket bound to the same port number.

  Because ZeroMQ is message-oriented, we cannot simply use recv_into to read
  bytes from the UDP socket into the ZMQ socket. We use socket.makefile() to
  facilitate reading and writing whole lines.

  usage: udp2zmq [-h] port

  positional arguments:
    port        Port to forward

  optional arguments:
    -h, --help  show this help message and exit  usage: udp2zmq.py [-h] port

  :copyright: (c) 2012 by Ori Livneh <ori@wikimedia.org>
  :license: GNU General Public Licence 2.0 or later

"""
import argparse
import io
import logging
import socket
import sys
import zmq


UDP_BUFSIZE = 65536  # Udp2LogConfig::BLOCK_SIZE

parser = argparse.ArgumentParser(description='ZeroMQ UDP => PUB Device')
parser.add_argument('port', type=int, help='Port to forward')
args = parser.parse_args()


logging.basicConfig(stream=sys.stderr, level=logging.DEBUG,
                    format='%(asctime)s %(message)s')

ctx = zmq.Context.instance()
sock_out = ctx.socket(zmq.PUB)
sock_out.bind('tcp://*:%d' % args.port)

logging.info('Forwarding udp:%d => tcp:%d...', args.port, args.port)
sock_in = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock_in.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
sock_in.bind(('0.0.0.0', args.port))

with io.open(sock_in.fileno(), buffering=UDP_BUFSIZE, encoding='utf8',
             errors='ignore') as f:
    for line in f:
        sock_out.send_string(line)
